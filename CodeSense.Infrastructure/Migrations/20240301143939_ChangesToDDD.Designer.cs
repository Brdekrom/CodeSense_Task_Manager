// <auto-generated />
using System;
using CodeSense.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CodeSense.Infrastructure.Migrations
{
    [DbContext(typeof(CodeSenseDbContext))]
    [Migration("20240301143939_ChangesToDDD")]
    partial class ChangesToDDD
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CodeSense.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsClient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MainAddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VATNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("CodeSense.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientCompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployerCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientCompanyId");

                    b.HasIndex("EmployerCompanyId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("CodeSense.Domain.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientCompanyId")
                        .HasColumnType("int");

                    b.Property<int>("ConsultancyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuoteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientCompanyId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("CodeSense.Domain.Entities.ProjectQuote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientCompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("ConsultancyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ProjectQuote");
                });

            modelBuilder.Entity("CodeSense.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientCompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientCompanyId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CodeSense.Domain.Entities.Company", b =>
                {
                    b.OwnsMany("CodeSense.Domain.ValueObjects.Address", "Addresses", b1 =>
                        {
                            b1.Property<int>("CompanyId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Box")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Country")
                                .HasColumnType("int");

                            b1.Property<string>("HouseNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("IsPrimary")
                                .HasColumnType("bit");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CompanyId", "Id");

                            b1.ToTable("Companies_Addresses");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.OwnsOne("CodeSense.Domain.ValueObjects.ContactData", "ContactData", b1 =>
                        {
                            b1.Property<int>("CompanyId")
                                .HasColumnType("int");

                            b1.Property<string>("PrimaryEmail")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PrimaryPhoneNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SecondaryEmails")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SecondaryPhoneNumbers")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.OwnsOne("CodeSense.Domain.ValueObjects.FinancialData", "FinancialData", b1 =>
                        {
                            b1.Property<int>("CompanyId")
                                .HasColumnType("int");

                            b1.Property<int?>("Budget")
                                .HasColumnType("int");

                            b1.Property<int?>("Cost")
                                .HasColumnType("int");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.OwnsOne("CodeSense.Domain.ValueObjects.Address", "MainAddress", b1 =>
                        {
                            b1.Property<int>("CompanyId")
                                .HasColumnType("int");

                            b1.Property<string>("Box")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Country")
                                .HasColumnType("int");

                            b1.Property<string>("HouseNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("IsPrimary")
                                .HasColumnType("bit");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.Navigation("Addresses");

                    b.Navigation("ContactData")
                        .IsRequired();

                    b.Navigation("FinancialData");

                    b.Navigation("MainAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("CodeSense.Domain.Entities.Employee", b =>
                {
                    b.HasOne("CodeSense.Domain.Entities.Company", "ClientCompany")
                        .WithMany()
                        .HasForeignKey("ClientCompanyId");

                    b.HasOne("CodeSense.Domain.Entities.Company", "EmployerCompany")
                        .WithMany("Employees")
                        .HasForeignKey("EmployerCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeSense.Domain.Entities.Project", "Project")
                        .WithMany("Employees")
                        .HasForeignKey("ProjectId");

                    b.OwnsOne("CodeSense.Domain.ValueObjects.ContactData", "ContactData", b1 =>
                        {
                            b1.Property<int>("EmployeeId")
                                .HasColumnType("int");

                            b1.Property<string>("PrimaryEmail")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PrimaryPhoneNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SecondaryEmails")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SecondaryPhoneNumbers")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.OwnsOne("CodeSense.Domain.ValueObjects.Availability", "Availability", b1 =>
                        {
                            b1.Property<int>("EmployeeId")
                                .HasColumnType("int");

                            b1.Property<DateOnly>("From")
                                .HasColumnType("date");

                            b1.Property<DateOnly?>("Until")
                                .HasColumnType("date");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.OwnsOne("CodeSense.Domain.ValueObjects.EmployeeFinancialData", "FinancialData", b1 =>
                        {
                            b1.Property<int>("EmployeeId")
                                .HasColumnType("int");

                            b1.Property<int?>("DailyRate")
                                .HasColumnType("int");

                            b1.Property<int?>("DailySalary")
                                .HasColumnType("int");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.Navigation("Availability")
                        .IsRequired();

                    b.Navigation("ClientCompany");

                    b.Navigation("ContactData");

                    b.Navigation("EmployerCompany");

                    b.Navigation("FinancialData");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CodeSense.Domain.Entities.Project", b =>
                {
                    b.HasOne("CodeSense.Domain.Entities.Company", "ClientCompany")
                        .WithMany("Projects")
                        .HasForeignKey("ClientCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("CodeSense.Domain.ValueObjects.FinancialData", "FinancialData", b1 =>
                        {
                            b1.Property<int>("ProjectId")
                                .HasColumnType("int");

                            b1.Property<int?>("Budget")
                                .HasColumnType("int");

                            b1.Property<int?>("Cost")
                                .HasColumnType("int");

                            b1.HasKey("ProjectId");

                            b1.ToTable("Projects");

                            b1.WithOwner()
                                .HasForeignKey("ProjectId");
                        });

                    b.OwnsOne("CodeSense.Domain.ValueObjects.ProjectDates", "ProjectDates", b1 =>
                        {
                            b1.Property<int>("ProjectId")
                                .HasColumnType("int");

                            b1.Property<DateOnly>("EndDate")
                                .HasColumnType("date");

                            b1.Property<DateOnly>("StartDate")
                                .HasColumnType("date");

                            b1.HasKey("ProjectId");

                            b1.ToTable("Projects");

                            b1.WithOwner()
                                .HasForeignKey("ProjectId");
                        });

                    b.OwnsMany("CodeSense.Domain.ValueObjects.Requirement", "Requirements", b1 =>
                        {
                            b1.Property<int>("ProjectId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.HasKey("ProjectId", "Id");

                            b1.ToTable("Requirement");

                            b1.WithOwner()
                                .HasForeignKey("ProjectId");

                            b1.OwnsOne("CodeSense.Domain.ValueObjects.RequiredEmployees", "RequiredEmployees", b2 =>
                                {
                                    b2.Property<int>("RequirementProjectId")
                                        .HasColumnType("int");

                                    b2.Property<int>("RequirementId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Level")
                                        .HasColumnType("int");

                                    b2.Property<int>("Quantity")
                                        .HasColumnType("int");

                                    b2.HasKey("RequirementProjectId", "RequirementId");

                                    b2.ToTable("Requirement");

                                    b2.WithOwner()
                                        .HasForeignKey("RequirementProjectId", "RequirementId");
                                });

                            b1.Navigation("RequiredEmployees")
                                .IsRequired();
                        });

                    b.Navigation("ClientCompany");

                    b.Navigation("FinancialData");

                    b.Navigation("ProjectDates")
                        .IsRequired();

                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("CodeSense.Domain.Entities.ProjectQuote", b =>
                {
                    b.HasOne("CodeSense.Domain.Entities.Company", null)
                        .WithMany("ProjectQuotes")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("CodeSense.Domain.Entities.User", b =>
                {
                    b.HasOne("CodeSense.Domain.Entities.Company", "ClientCompany")
                        .WithMany("Users")
                        .HasForeignKey("ClientCompanyId");

                    b.Navigation("ClientCompany");
                });

            modelBuilder.Entity("CodeSense.Domain.Entities.Company", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("ProjectQuotes");

                    b.Navigation("Projects");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CodeSense.Domain.Entities.Project", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
